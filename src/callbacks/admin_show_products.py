from typing import Union
from uuid import UUID

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from src.handlers.admin_commands import admin_get_all_users, admin_get_all_products
from src.schemas.product import Product
from src.schemas.user import User
import re


def _is_valid_uuid(uuid_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º UUID"""
    try:
        UUID(uuid_str)
        return True
    except ValueError:
        return False


async def _get_product_from_state(callback: CallbackQuery, state: FSMContext) -> Union[Product, None]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ state –ø–æ ID –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö"""
    product_id = callback.data.split(":")[1]
    products = await state.get_value("products")
    return next((product for product in products if product.product_id == product_id), None)


router = Router(name="Admin show products")


@router.callback_query(F.data == "show_products")
async def handle_products_list_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    await admin_get_all_products(message=callback.message, state=state, is_edited=True)


@router.callback_query(
    F.data.startswith("products:"),
    lambda query: _is_valid_uuid(query.data.split(":")[1])
)
async def show_product_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    product = await _get_product_from_state(callback, state)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_products_list")]]
    )

    await callback.message.edit_text(
        "üõçÔ∏è <b>–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞</b>\n"
        f"‚îú‚îÄ üÜî <code>{product.product_id}</code>\n"
        f"‚îú‚îÄ üìõ {product.name}\n"
        f"‚îú‚îÄ üí∞ {product.price} –∑–≤—ë–∑–¥\n"
        f"‚îî‚îÄ üóÇ –ö–∞—Ç.: <code>{product.category_id}</code>\n\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product.description}</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(
    F.data.startswith("products:"),
    lambda query: query.data.split(":")[1] in ("prev", "next")
)
async def handle_products_pagination(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    pagination = await state.get_value("admin_products_pagination")
    products = await state.get_value("products")
    old_page = pagination.current_page
    new_page = await pagination.process_callback(callback.data)

    if old_page == new_page:
        await callback.answer()
        return

    keyboard = await pagination.get_page_keyboard(
        prefix="products",
        additional_buttons=[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
    )

    await state.update_data(admin_products_pagination=pagination)

    try:
        await callback.message.edit_text(
            f"¬Æ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Å–µ–≥–æ {len(products)}):",
            reply_markup=keyboard
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
        else:
            raise

    await callback.answer()


@router.callback_query(F.data == "back_to_products_list")
async def return_to_products_list(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    pagination = await state.get_value("admin_products_pagination")
    products = await state.get_value("products")

    keyboard = await pagination.get_page_keyboard(
        prefix="products",
        additional_buttons=[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
    )
    await callback.message.edit_text(f"¬Æ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Å–µ–≥–æ {len(products)}):", reply_markup=keyboard)
